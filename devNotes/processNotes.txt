Process Notes for React JSX study
=================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.




On creating a component:
=====================================================================================
* To make a layout making a left and right split...

1. Create a new folder inside ./src called composition
  ------------------------------
      ./src/composition
  ------------------------------

2. Create a new file inside called Split.js
  -----------------------------
    Split.js
  -----------------------------

3. Import React (so you can use JSX) in Split.js
  -----------------------------------
    import React from 'react'
  -----------------------------------

4. Create a function for the component:
  ----------------------------------
    function Split() {                                 // "Split" component
      return (
        This is the content of the split component.
      )
    }
  ----------------------------------

5. Export the component so it can be added to App.
  -----------------------------------
      function Split() {
      return (
        This is the content of the split component.
      )
    }

    export default Split;                             // export
  -----------------------------------

6. Then import to App.
  * Note: You'll get a error saying split is defined but never used.
    This is fine since you will use it in the coming steps.
  -----------------------------------------------
    import Split from './composition/Split';
  -----------------------------------------------

7. Add the Split component to your app!
  ------------------------------------------------
    import React from 'react';
    import Split from './composition/Split';


    function App() {
      return (
        <main className='App'>
          <Split />                                     // Split component added to app
        </main>
      );
    }

    export default App;
  ------------------------------------------------




On component styling:
===========================================================================================
* To style the component you just created.

1. Create file called App.css in the src folder:
* Webpack has enabled a feature to let you add CSS files specifically for each component you make. 
  So in this case, you are making a style sheet specifically for the App component. This is neat because
  it is a seperation of concerns that allows you to focus on one section of styling at a time.
  ------------------------------------------------------------------
    src  >  App.css
  ------------------------------------------------------------------

2. In the css file for the component, use the "className" to target the component
  ------------------------------------------------------------------
    .App {
      display: flex;
      margin: 40px;
      min-height: calc(100vh - 80px);
    }
  ------------------------------------------------------------------

3. Import the CSS file to the App.js file:
  * Webpack is going to add these styles to the browser when you import them to 
    the JavaScript file.
  ------------------------------------------------------------------
    import './App.css';
  ------------------------------------------------------------------



For Example in addition to the steps above.
=================================================================================================
-- As the objective is to do a split screen, we need to do the same thing with the Split.js 
   file. So in src/composition, create a Split.css file with the following:
    ---------------------------------------------------
     .split {
        flex: 1;
        padding: 1em;
      }
    --------------------------------------------------- 
    and save it in there. Then, in the Split.js file, import it via './Split.css'.

  4. Alter the App component to do a left and right split:
     * For this, instead of simply importing the single component tag, you need to create tags and content for the left
       and right to do the test.
      --------------------------------------------------------------------------------------------------------
        function App() {
          return (
            <main className='App'>
              <Split>
                This is the content for the left `Split`. Lorem ipsum...
              </Split>
              <Split>
                This is the content for the right `Split`. Inventore a....
              </Split>
            </main>
          );
        }
      --------------------------------------------------------------------------------------------------------
      However, at this time you wont see the new content... for that you will need props.

  5. Inside Split.js, pass in props and call props.children to get the content in App.js
    * So again for the props, its a way of passing properties and data down from one component to another. In this case, we have text above that will 
      be passed to the Split component via props and then when you call props.children, you will see the message.
      --------------------------------------------------------
          function Split(props) {                                 // pass the props object
            return (
              <div className='split'> 
                {props.children}                                  // and call the props.children
              </div>
            );
          }
      ---------------------------------------------------------

  6. To style each Split component differently, add respective className's:
    ---------------------------------------------------------------------------------------
        function App() {
          return (
            <main className='App'>
              <Split className="left">                                                          // className for left column
                This is the content for the left `Split`. Lorem ipsum...
              </Split>
              <Split className="right">
                This is the content for the right `Split`. Inventore...                        // classname for right column
              </Split>
            </main>
          );
        }
    --------------------------------------------------------------------------------------

    7. To style the "left" and "right" className's, got o the App.css stylesheet
    -----------------------------------------------
        .App {
          display: flex;
          margin: 40px;
          min-height: calc(100vh - 80px);
        }

        .left {                                         // stylization for left column
          background-color: darkslategray;
          color: azure;
        }

        .right {                                         // stylization for right column
          background-color: wheat;
          color: firebrick;
        }
    -----------------------------------------------

--- However, nothing will change because the Split component NEEDS TO BE MADE CONFIGURABLE.

  8. Make the Split component Configurable.
    * Inside the split component, add code to read the props and create a new combined variable called "combinedClassName".
    ------------------------------------------------------------------------------------------
        function Split(props) {
          const combinedClassName = `split ${props.className}`;                                  // Code that will read props and create new className.
          return (
            <div className={combinedClassName}>                                                  // and call the new combinedClassName.
              {props.children}
            </div>
          );
        }
    ------------------------------------------------------------------------------------------






Making a tooltip component
=================================================================
1. In src/composition, create a file called Tooltip.js.
  -------------------------------------------------------------------------------------
    src  >   composition  >  Tooltip.js
  -------------------------------------------------------------------------------------

2. Create your Tooltip component:
  ------------------------------------------------------------------------------------
      import React from 'react';

      function Tooltip(props) {                                                         // Tooltip components with props passed in
        return (
          <span className="Tooltip"></span>
        );
      }

      export default Tooltip;
  ------------------------------------------------------------------------------------

  3. Create sections for your tooltips components:
    -----------------------------------------------------------------------------------
      import React from 'react';

      function Tooltip(props) {
        return (
          <span className="Tooltip">                                                     // span section for content of tooltip
            <span className="Tooltip-content">
              {props.children}
            </span>
            <div className="Tooltip-message">                                             // div with message section for message when highlighted.
              {props.children}
            </div>
          </span>
        );
      }

      export default Tooltip;
    -----------------------------------------------------------------------------------

  4. Add tooltip stylizations in a Tooltip.css file:
    -----------------------------------------------------------------------------------
    .Tooltip {
        position: relative;
        cursor: pointer;
      }

      .Tooltip-content {
        color: #01A800;
      }

      .Tooltip-message {                                                 // message will have white text on dark background and appear above the text.
        background-color: hsla(0, 0%, 10%, 0.9);
        border-radius: 3px;
        color: #fff;
        left: 4vw;
        margin-bottom: 5px;
        margin-left: -8vw;
        min-width: 160px;
        padding: 7px 10px;
        position: absolute;
        text-align: center;
        top: calc(-1.2em - 14px);
        white-space: nowrap;
      }
 
      .Tooltip-message:after {                                            // speech bubble look with a triangle under it.
        border-left: 5px solid transparent;
        border-right: 5px solid transparent;
        border-top: 5px solid hsla(0, 0%, 20%, 0.9);
        content: " ";
        font-size: 0;
        left: 6vw;
        line-height: 0;
        margin-left: -5px;
        position: absolute;
        top: calc(18px + 14px);
        width: 0;
      }

      .Tooltip-message {                                                  // start hidden
        opacity: 0;
        pointer-events: none;
        visibility: hidden;
      }

      .Tooltip:hover > .Tooltip-message {                                 // show on hover
        opacity: 1;
        visibility: visible;
      }
    -----------------------------------------------------------------------------------

  5. Import the tooltip.css file to yourr Tooltip.js file to use.
    -----------------------------------------------------------------------------------
        import React from 'react';
        import './Tooltip.css';                                                           // import Tooltip.css to the Tooltip.js file.

        function Tooltip(props) {
          return (
            <span className="Tooltip">
              <span className="Tooltip-content">
                {props.children}
              </span>
              <div className="Tooltip-message">
                {props.children}
              </div>
            </span>
          );
        }

        export default Tooltip;
    -----------------------------------------------------------------------------------


  6. Import Tooltip into App.js to see how it looks.
    * There are two ways to import the tooltip component into the app. 
      1. The first way is to creater a const variable that contains the component you want to use. You then
         use it inside the app inside brackets. This is a preferable way since it will not clutter up the app component.      
      2. The second way is to create the tooltip component inside the app component.
    ------------------------------------------------------------------------------------
      import React from 'react';
      import Split from './composition/Split';
      import './App.css';
      import Tooltip from './composition/Tooltip';

      const firstTooltip = (                                                                    // tooltip created outside app and then used inside app.
        <Tooltip message='tooltip message'>
        ipsum
        </Tooltip>
      )
      const secondTooltip = (                                                                  // another tooltip created outside app and then used inside it.
        <Tooltip message='another tooltip message'>
          officiis
        </Tooltip>
      )

      function App() {
        return (
          <main className='App'>
            <Split className='left' flexBasis='2'>
              This is the content for the left Split. Lorem {firstTooltip} dolor sit amet consectetur, adipisicing elit.        // first tooltip
              Incidunt ex velit suscipit facere officia?<br />
              <Tooltip message='one more tooltip message'>                                                                      // second tooltip (tooltip created inside app.)
                Necessitatibus?
              </Tooltip>
            </Split>
            <Split className='right'>
              This is the content for the right Split. Inventore aliquid cupiditate suscipit repellat. 
              Quaerat quis {secondTooltip} quam fuga. Aliquid quo possimus id soluta aspernatur.                                 // third tooltip
            </Split>
          </main>
        )
      }

      export default App
    ------------------------------------------------------------------------------------

Resources
==========
React Developer tools: https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en
* See the console components tab to see a list of all the components.

https://www.geeksforgeeks.org/reactjs-importing-exporting/    -- good elaboration on importation and exportation.